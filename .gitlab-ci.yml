stages:
  - build
  - test
  - deploy
  - DAST

variables:
  DEV_IMAGE: $CI_REGISTRY_IMAGE:dev
  PROD_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

build_dev_dependencies:
  stage: build
  image: composer:latest
  before_script:
    - echo "$DEV_ENV_FILE" > .env.local
  script:
    - composer install --no-interaction
  artifacts:
    paths:
      - vendor/
      - .

build_dev_image:
  services:
    - name: docker:24-dind
      command: ["--tls=false"]
  image: docker:24
  stage: build
  variables:
    DOCKER_TLS_CERTDIR: ""
    GIT_STRATEGY: none
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $DEV_IMAGE ./.docker
    - docker push $DEV_IMAGE
  needs: [ build_dev_dependencies ]

build_prod_dependencies:
  stage: build
  image: composer:latest
  variables:
    APP_ENV: prod
    APP_DEBUG: 0
  before_script:
    - echo "$PROD_ENV_FILE" &gt; .env.local
  script:
    - composer install --no-dev --optimize-autoloader --no-interaction
    - composer dump-env prod
  artifacts:
    paths:
      - vendor/
      - .
  only:
    - tags

build_prod_image:
  services:
    - name: docker:dind
      alias: dind
  image: docker:20.10.16
  stage: build
  variables:
    GIT_STRATEGY: none
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $PROD_IMAGE ./.docker
    - docker push $PROD_IMAGE
    - docker push $CI_REGISTRY_IMAGE:latest
  needs: [ build_prod_dependencies ]
  only:
    - tags

cs:
  stage: test
  image: $DEV_IMAGE
  variables:
    GIT_STRATEGY: none
  script:
    - ./vendor/bin/php-cs-fixer -v --config=.php-cs-fixer.dist.php fix --dry-run --stop-on-violation --diff

phpunit:
  stage: test
  image: $DEV_IMAGE
  services:
    - name: postgres:14
      alias: postgres
  variables:
    APP_ENV: test
    DATABASE_URL: "pgsql://postgres:postgres@postgres:5432/test_db"
    POSTGRES_DB: test_db
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    GIT_STRATEGY: none
  before_script:
    - apt-get update &amp;&amp; apt-get install -y postgresql-client
    - until pg_isready -h postgres -p 5432 -U postgres; do sleep 1; done
    - bin/console doctrine:database:create --if-not-exists
    - bin/console doctrine:migrations:migrate --no-interaction
  script:
    - XDEBUG_MODE=coverage php ./vendor/bin/phpunit --colors=never --coverage-text --coverage-cobertura=coverage.cobertura.xml --log-junit phpunit-report.xml --do-not-cache-result
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'
  artifacts:
    when: always
    reports:
      junit: phpunit-report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.cobertura.xml

composer:
  variables:
    GIT_STRATEGY: none
  stage: test
  image: $DEV_IMAGE
  script:
    - composer normalize --diff --dry-run
    - composer validate
    - vendor/bin/composer-require-checker check --config-file=composer-require-checker.json
    - php8.2 vendor/bin/composer-unused
    - composer audit
    - composer check-platform-reqs

phpstan:
  variables:
    GIT_STRATEGY: none
  stage: test
  image: $DEV_IMAGE
  script:
    - vendor/bin/phpstan analyze

kics-iac-scan:
  stage: test
  image:
    name: checkmarx/kics:latest
    entrypoint: [ "" ]
  script:
    - kics scan --no-progress -p ${PWD} -o ${PWD} --report-formats json --output-name kics-results
  artifacts:
    when: always
    name: kics-results.json
    paths:
      - kics-results.json

composer_outdated_check:
  stage: test
  image: composer:latest
  variables:
    GIT_STRATEGY: none
  script:
    - composer outdated --strict --major-only --sort-by-age
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

rector:
  variables:
    GIT_STRATEGY: none
  stage: test
  image: $DEV_IMAGE
  script:
    - vendor/bin/rector --dry-run

trivy_container_scan:
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [ "" ]
  variables:
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  script:
    - trivy --version
    - time trivy image --download-db-only
    - time trivy image --exit-code 0 --format template --template "@/contrib/gitlab.tpl"
      --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$FULL_IMAGE_NAME"
    - time trivy image --exit-code 0 "$FULL_IMAGE_NAME"
    - time trivy image --exit-code 1 --severity CRITICAL "$FULL_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
  artifacts:
    when: always
    name: gl-container-scanning-report.json
    paths:
      - gl-container-scanning-report.json
    reports:
      container_scanning: gl-container-scanning-report.json
  stage: test

gitleaks_secret_detection:
  stage: test
  image:
    name: zricethezav/gitleaks:latest
    entrypoint: [ "" ]
  script:
    - gitleaks dir . --report-path gitleaks-report.json
  artifacts:
    when: always
    paths:
      - gitleaks-report.json

